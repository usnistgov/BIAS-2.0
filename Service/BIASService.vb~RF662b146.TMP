Imports OASIS.BIAS.V2
Imports Microsoft.VisualBasic
Imports System.Text
Imports System.IO
Imports System.Data
Imports System.Windows.Forms
Imports System.Configuration
Imports System.ServiceModel.Web
Imports Microsoft.VisualBasic.Interaction
Imports System.Collections.Generic
Imports System.Linq
Imports System.Reflection

Module mainModule
    Sub Main()
        Dim bias1 As New BIASService()

        Dim enrol As New EnrollRequest()
        bias1.Enroll(enrol)
        'Dim deleteSubGal As New DeleteSubjectFromGalleryRequest()
        'deleteSubGal.Identity = New BIASIdentity
        'deleteSubGal.Identity.SubjectID = "5LACU447"
        'bias1.DeleteSubjectFromGallery(deleteSubGal)

        'Dim delBiog As New DeleteBiographicDataRequest
        'delBiog.GalleryID = "1"

        'testIden.SubjectID = "XXW3IZA0"
        'delBiog.Identity = testIden
        'bias1.DeleteBiographicData(delBiog)
        'Dim enrol As New EnrollRequest
        'bias1.Enroll(enrol)

        'Dim addSub As New AddSubjectToGalleryRequest
        'bias1.AddSubjectToGallery(addSub)

        'Dim createSub As New CreateSubjectRequest
        'bias1.CreateSubject(createSub)
        'Dim a1 As New DeleteBiographicDataRequest()
        'bias1.DeleteBiographicData(a1)
        'Dim a1 As New SetBiographicDataRequest()
        'bias1.SetBiographicData(a1)
    End Sub
End Module


<ServiceModel.ServiceBehavior(IncludeExceptionDetailInFaults:=True, Namespace:="http://docs.oasis-open.org/bias/ns/bias-2.0/")>
Public Class BIASService
    Implements BIAS_v2

    Private Property bir As BIASBiometricDataType

    Public Function generateRandomID() As String

        Dim characters As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        Dim rand As New Random
        Dim sb As New StringBuilder
        For charPos As Integer = 1 To 8
            Dim idx As Integer = rand.Next(0, 35)
            sb.Append(characters.Substring(idx, 1))
        Next
        Return sb.ToString()
    End Function

    'Used in deleteBiographicData
    Function CheckForAlphaCharacters(ByVal StringToCheck As String)
        For i = 0 To StringToCheck.Length - 1
            If Char.IsLetter(StringToCheck.Chars(i)) Then
                Return True
            End If
        Next
        Return False
    End Function

    Public Function AddSubjectToGallery(AddSubjectToGalleryRequest As AddSubjectToGalleryRequest) As AddSubjectToGalleryResponsePackage Implements BIAS_v2.AddSubjectToGallery

        Dim galleryResponse As New AddSubjectToGalleryResponsePackage()
        galleryResponse.ResponseStatus = New ResponseStatus
        Dim GalleryID As String
        Dim SubjectID As String
        Dim IdentityClaim As String = AddSubjectToGalleryRequest.Identity.SubjectID
        Dim EncounterID As String = "1" 'temporarily

        'Check to see if all inputs are valid
        If (AddSubjectToGalleryRequest.GalleryID IsNot Nothing) Then
            GalleryID = AddSubjectToGalleryRequest.GalleryID
        Else
            galleryResponse.ResponseStatus.Return = 3
            galleryResponse.ResponseStatus.Message = "The gallery field for the AddSubjectToGalleryRequest is empty"
            Return galleryResponse
        End If
        If (AddSubjectToGalleryRequest.Identity.SubjectID IsNot Nothing) Then
            SubjectID = AddSubjectToGalleryRequest.Identity.SubjectID
        Else
            galleryResponse.ResponseStatus.Return = 9
            galleryResponse.ResponseStatus.Message = "The input subject ID is empty or in an invalid format."
            Return galleryResponse
        End If
        If (AddSubjectToGalleryRequest.Identity.IdentityClaim IsNot Nothing) Then
            IdentityClaim = AddSubjectToGalleryRequest.Identity.IdentityClaim
        ElseIf (AddSubjectToGalleryRequest.Identity.SubjectID IsNot Nothing) Then
            IdentityClaim = AddSubjectToGalleryRequest.Identity.SubjectID
        Else
            galleryResponse.ResponseStatus.Return = 3
            galleryResponse.ResponseStatus.Message = "There is no IdentityClaim or SubjectID for this AddSubjectToGalleryRequest"
            Return galleryResponse
        End If
        If (AddSubjectToGalleryRequest.Identity.EncounterID IsNot Nothing) Then
            EncounterID = AddSubjectToGalleryRequest.Identity.EncounterID
        End If
        'Not sure how to tell if it's encounter based or not, don't know if we should have an error message here since it may just not be an encounter based system.


        'Check that the gallery Exists
        Dim galleriesPath = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Galleries"
        If (Directory.Exists(galleriesPath & "\" & GalleryID)) Then

            'Check that the subject file exists
            Dim subjectPath = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records\" & SubjectID
            Dim subjectFile As String = subjectPath & "\" & SubjectID & ".txt"

            If (File.Exists(subjectFile)) Then

                'create the strings
                Dim subjectIDString = "SubjectID:" & SubjectID & Environment.NewLine
                Dim galleryIDString = "GalleryID:" & GalleryID & Environment.NewLine
                Dim identityClaimString = "IdentityClaim:" & IdentityClaim & Environment.NewLine
                Dim encounterString = "EncounterID:" & EncounterID & Environment.NewLine

                'read in the file
                Dim fileContents As String
                Using sr As New StreamReader(subjectFile)
                    fileContents = sr.ReadToEnd()
                End Using

                'Add lines to the beginning of the string
                fileContents = subjectIDString & galleryIDString & identityClaimString & encounterString & fileContents
                MessageBox.Show(fileContents)

                'Create new directory for subjectID
                System.IO.Directory.CreateDirectory(Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Galleries\" & GalleryID _
                                                    & "\" & SubjectID)

                'create new file in gallery
                Dim subjectFileGalPath As String = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString _
                                                   & "\MasterDB\Galleries\" & GalleryID & "\" & SubjectID & "\" & SubjectID & ".txt"
                Dim overwriteSubjectFilePath As String = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString _
                                                   & "\MasterDB\Subject Records\" & SubjectID & "\" & SubjectID & ".txt"
                Dim objWriter As New System.IO.StreamWriter(subjectFileGalPath)
                objWriter.Write(fileContents)

                'rewrite subject record file to keep consistent
                System.IO.File.WriteAllText(overwriteSubjectFilePath, "")
                System.IO.File.WriteAllText(overwriteSubjectFilePath, fileContents)

                objWriter.Close()

            Else
                galleryResponse.ResponseStatus.Return = 1
                galleryResponse.ResponseStatus.Message = "The subject record does not exist within the subject records directory."
                Return galleryResponse
            End If
        Else
            galleryResponse.ResponseStatus.Return = 11
            galleryResponse.ResponseStatus.Message = "The gallery referenced by the input gallery ID does not exist."
            Return galleryResponse
        End If

        Return galleryResponse
    End Function

    Public Function CheckQuality(CheckQualityRequest As CheckQualityRequest) As CheckQualityResponsePackage Implements BIAS_v2.CheckQuality

        Dim AlgorithmVersion = "1"
        Dim QualityScore As QualityType 'none yet
        Dim [Return] 'value indicating success or a specific error condition. 0 = Unsucesseful, 1 = Sucessful
        Dim responseMessage As String = ""


        Dim bir As CBEFF_BIR_Type
        bir = CheckQualityRequest.BiometricData.BIR

        If bir Is Nothing Then
            Dim SubjectID As String
            SubjectID = CheckQualityRequest.Identity.SubjectID
            If SubjectID Is Nothing Then
                [Return] = 0
                responseMessage = "Quality Check Unsuccessful. Both BIR and SubjectID were not provided"
                QualityScore = Nothing
            Else
                [Return] = 1
                responseMessage = "Quality Check successful based on SubjectID. The quality score is the previously held quality score within the CheckQualityRequest"
                QualityScore = CheckQualityRequest.QualityInfo.QualityScore
            End If
        Else
            [Return] = 1
            responseMessage = "Quality Check successful based on BiometricData.BIR. The quality score is the previously held quality score within the CheckQualityRequest"
            QualityScore = CheckQualityRequest.QualityInfo.QualityScore
        End If

        Dim qualityResponse As New CheckQualityResponsePackage()

        qualityResponse.ResponseStatus.Return = [Return]
        qualityResponse.ResponseStatus.Message = responseMessage
        qualityResponse.QualityInfo.QualityScore = QualityScore
        qualityResponse.QualityInfo.AlgorithmVersion = AlgorithmVersion

        Return qualityResponse
    End Function

    Public Function ClassifyBiometricData(ClassifyBiometricDataRequest As ClassifyBiometricDataRequest) As ClassifyBiometricDataResponsePackage Implements BIAS_v2.ClassifyBiometricData

        'Hard coded to just return "Face"
        'Previously could be used to classify fingerprints, but with not necessary with faces.
        Dim classifyBioDataResponse As New ClassifyBiometricDataResponsePackage()
        classifyBioDataResponse.ResponseStatus = New ResponseStatus
        classifyBioDataResponse.ResponseStatus.Message = "Face"
        classifyBioDataResponse.ResponseStatus.Return = 0

        Return classifyBioDataResponse
    End Function

    Public Function CreateSubject(CreateSubjectRequest As CreateSubjectRequest) As CreateSubjectResponsePackage Implements BIAS_v2.CreateSubject
        'Creates a model-neutral subject record
        Dim createSubjectResponse As New CreateSubjectResponsePackage()
        createSubjectResponse.Identity = New BIASIdentity
        createSubjectResponse.ResponseStatus = New ResponseStatus

        '1. Generate a 8 digit ID (A-Z,0-9) - 2.25 Trillion Unique IDs - 
        Dim generatedID As String = generateRandomID()
        '2. Open text file with IDs currently in use.
        Try

            Dim sr As New StreamReader(Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\SubjectIDDB.txt")
            Dim line As String
            line = sr.ReadToEnd()
            '3. Search for generated ID
            Dim doesIDExist = line.IndexOf(generatedID)
            '4. If found, generate another.
            While doesIDExist > -1
                generatedID = generateRandomID()
                doesIDExist = line.IndexOf(generatedID)
            End While
            sr.Close()

            '5. Once a unique ID is generated, save it in the text file.
            line = line & generatedID & Environment.NewLine
            Dim path = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\SubjectIDDB.txt"
            System.IO.File.WriteAllText(path, "")
            System.IO.File.WriteAllText(path, line)

        Catch e As Exception
            Console.WriteLine(e.Message)
        End Try

        'create new folder for the subjectID
        System.IO.Directory.CreateDirectory(Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records\" & generatedID)

        '6. Create a subject record (text file)
        Dim f As FileStream = File.Create(Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records\" & generatedID & "\" & generatedID & ".txt")
        f.Close()

        '7. Write subjectID and the biographicData+biometricData headers to file
        Dim subjectRecordPath = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records\" & generatedID & "\" & generatedID & ".txt"
        Dim objWriter As New System.IO.StreamWriter(subjectRecordPath)
        objWriter.Write("SubjectID:" & generatedID & Environment.NewLine)
        objWriter.Write("BiographicData:" & Environment.NewLine)
        objWriter.Write("BiometricData:" & Environment.NewLine)
        objWriter.Close()

        '8.Create Response
        createSubjectResponse.Identity.SubjectID = generatedID
        createSubjectResponse.ResponseStatus.Return = 0
        createSubjectResponse.ResponseStatus.Message = "Success!"

        Return createSubjectResponse

    End Function

    Public Function DeleteBiographicData(DeleteBiographicDataRequest As DeleteBiographicDataRequest) As DeleteBiographicDataResponsePackage Implements BIAS_v2.DeleteBiographicData
        Dim SubjectID = DeleteBiographicDataRequest.Identity.SubjectID
        Dim GalleryID = DeleteBiographicDataRequest.GalleryID
        Dim deleteBiogDataResponse As New DeleteBiographicDataResponsePackage()
        deleteBiogDataResponse.ResponseStatus = New ResponseStatus()


        'Check to see if all inputs are valid
        If (DeleteBiographicDataRequest.GalleryID Is Nothing) Then
            deleteBiogDataResponse.ResponseStatus.Return = 3
            deleteBiogDataResponse.ResponseStatus.Message = "The gallery field for the AddSubjectToGalleryRequest is empty"
            Return deleteBiogDataResponse
        End If
        If (DeleteBiographicDataRequest.Identity.SubjectID Is Nothing) Then
            deleteBiogDataResponse.ResponseStatus.Return = 9
            deleteBiogDataResponse.ResponseStatus.Message = "The input subject ID is empty or in an invalid format."
            Return deleteBiogDataResponse
        End If

        'If no encounter ID
        Dim subjectFile = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records" & "\" & SubjectID & "\" & SubjectID & ".txt"

        'Read in text file, find the line # that has biographic data
        If (File.Exists(subjectFile)) Then
            Dim readText As List(Of String) = System.IO.File.ReadAllLines(subjectFile).ToList

            Dim biographicLineNum = readText.IndexOf("Biographic Data: ")

            'Now that we have the start of the biographic information, go line by line and if linenum is after the biographic data linenum, add the line num to new list
            Dim biogDataList As New List(Of Integer)()
            For index As Integer = 0 To readText.Count() - 1
                If index >= biographicLineNum Then
                    biogDataList.Add(index)
                End If
            Next

            biogDataList.Reverse() 'So that we can iterate through normally
            For index As Integer = 0 To biogDataList.Count() - 1
                readText.RemoveAt(biogDataList(index))
            Next

            System.IO.File.WriteAllLines(subjectFile, readText)

            Dim galleriesPath = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Galleries"
            If (Directory.Exists(galleriesPath & "\" & GalleryID)) Then
                Dim subjectFilePath = galleriesPath & "\" & GalleryID & "\" & SubjectID & ".txt"
                System.IO.File.WriteAllLines(subjectFilePath, readText)
            Else
                deleteBiogDataResponse.ResponseStatus.Return = 11
                deleteBiogDataResponse.ResponseStatus.Message = "The gallery referenced by the input gallery ID does not exist."
                Return deleteBiogDataResponse
            End If
        Else
            deleteBiogDataResponse.ResponseStatus.Return = 10
            deleteBiogDataResponse.ResponseStatus.Message = "The subject referenced by the input subject ID does not exist."
            Return deleteBiogDataResponse
        End If

        Return deleteBiogDataResponse
    End Function

    Public Function DeleteBiometricData(DeleteBiometricDataRequest As DeleteBiometricDataRequest) As DeleteBiometricDataResponsePackage Implements BIAS_v2.DeleteBiometricData
        Dim deleteBiomDataResponse As New DeleteBiometricDataResponsePackage()
        Dim SubjectID = "XXW3IZA0"
        Dim GalleryID = "1"

        'Check to see if all inputs are valid
        'If (DeleteBiometricDataRequest.GalleryID IsNot Nothing) Then
        '    GalleryID = DeleteBiometricDataRequest.GalleryID
        'Else
        '    deleteBiomDataResponse.ResponseStatus.Return = 3
        '    deleteBiomDataResponse.ResponseStatus.Message = "The gallery field for the AddSubjectToGalleryRequest is empty"
        '    Return deleteBiogDataResponse
        'End If
        'If (DeleteBiometricDataRequest.Identity.SubjectID IsNot Nothing) Then
        '    SubjectID = DeleteBiometricDataRequest.Identity.SubjectID
        'Else
        '    deleteBiomDataResponse.ResponseStatus.Return = 9
        '    deleteBiomDataResponse.ResponseStatus.Message = "The input subject ID is empty or in an invalid format."
        '    Return galleryResponse
        'End If


        'If no encounter ID
        Dim subjectPath = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records"
        Dim subjectFile As String = subjectPath & "\" & SubjectID & ".txt"
        'Read in text file, find the line # that has biographic data

        If (File.Exists(subjectFile)) Then
            Dim readText As List(Of String) = System.IO.File.ReadAllLines(subjectFile).ToList
            Dim biometricLineNum = -1
            For index As Integer = 0 To readText.Count() - 1
                If readText(index).IndexOf("BiometricData") > -1 Then
                    biometricLineNum = index
                End If
            Next

            If biometricLineNum > -1 Then
                readText.RemoveAt(biometricLineNum)
            End If
            System.IO.File.WriteAllLines(subjectFile, readText)

            Dim galleriesPath = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Galleries"
            If (Directory.Exists(galleriesPath & "\" & GalleryID)) Then
                Dim subjectFilePath = galleriesPath & "\" & GalleryID & "\" & SubjectID & ".txt"
                System.IO.File.WriteAllLines(subjectFilePath, readText)
            Else
                deleteBiomDataResponse.ResponseStatus.Return = 11
                deleteBiomDataResponse.ResponseStatus.Message = "The gallery referenced by the input gallery ID does not exist."
                Return deleteBiomDataResponse
            End If
        Else
            deleteBiomDataResponse.ResponseStatus.Return = 10
            deleteBiomDataResponse.ResponseStatus.Message = "The subject referenced by the input subject ID does not exist."
            Return deleteBiomDataResponse
        End If

        Return deleteBiomDataResponse
    End Function

    Public Function DeleteSubject(DeleteSubjectRequest As DeleteSubjectRequest) As DeleteSubjectResponsePackage Implements BIAS_v2.DeleteSubject
        Dim deleteSubjectResponse As New DeleteSubjectResponsePackage()
        deleteSubjectResponse.ResponseStatus = New ResponseStatus
        Dim subjectID As String

        'Check that SubjectID is not null
        If (DeleteSubjectRequest.Identity.SubjectID IsNot Nothing) Then
            subjectID = DeleteSubjectRequest.Identity.SubjectID
        Else
            deleteSubjectResponse.ResponseStatus.Return = 9
            deleteSubjectResponse.ResponseStatus.Message = "The input subject ID is empty or in an invalid format."
            Return deleteSubjectResponse
        End If

        'get the gallery that the subject is potentially in.
        Dim GalleryID As String = ""
        Dim subjectFile As String = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records\" _
                                    & subjectID & "\" & subjectID & ".txt"
        If (File.Exists(subjectFile)) Then
            Dim readText As List(Of String) = System.IO.File.ReadAllLines(subjectFile).ToList

            'read file contents, find galleryID, read in the value
            For index As Integer = 0 To readText.Count() - 1
                Dim currentLine As String = readText(index)
                Dim galleryIDIndex As Integer = currentLine.IndexOf("GalleryID:")
                If (galleryIDIndex = 0) Then
                    GalleryID = currentLine.Substring(10)
                End If
            Next

            'delete the folder+contents
            Dim subjectRecordFolder = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records\" _
                                    & subjectID
            System.IO.Directory.Delete(subjectRecordFolder, True)

        Else 'if the subject record doesn't exist
            deleteSubjectResponse.ResponseStatus.Return = 10
            deleteSubjectResponse.ResponseStatus.Message = "The subject referenced by the input subject ID does not exist."
            Return deleteSubjectResponse
        End If


        'Go to gallery and delete the folder+contents
        Dim recordInGalleryPath = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Galleries\" & GalleryID & "\" & subjectID

        System.IO.Directory.Delete(recordInGalleryPath, True)

        deleteSubjectResponse.ResponseStatus.Return = 0
        deleteSubjectResponse.ResponseStatus.Message = "Sucessfully deleted."

        Return deleteSubjectResponse
    End Function

    Public Function DeleteSubjectFromGallery(DeleteSubjectFromGalleryRequest As DeleteSubjectFromGalleryRequest) As DeleteSubjectFromGalleryResponsePackage Implements BIAS_v2.DeleteSubjectFromGallery
        Dim deleteSubjectGalleryResponse As New DeleteSubjectFromGalleryResponsePackage()
        deleteSubjectGalleryResponse.ResponseStatus = New ResponseStatus

        Dim GalleryID As String = DeleteSubjectFromGalleryRequest.GalleryID
        Dim SubjectID As String = DeleteSubjectFromGalleryRequest.Identity.SubjectID
        Dim IdentityClaim As String = DeleteSubjectFromGalleryRequest.Identity.IdentityClaim
        Dim idOrClaim As String = ""

        'Check to see if all inputs are valid
        If (DeleteSubjectFromGalleryRequest.GalleryID Is Nothing) Then
            deleteSubjectGalleryResponse.ResponseStatus.Return = 3
            deleteSubjectGalleryResponse.ResponseStatus.Message = "The gallery field for the DeleteSubjectFromGalleryRequest is empty"
            Return deleteSubjectGalleryResponse
        End If

        If (DeleteSubjectFromGalleryRequest.Identity.SubjectID Is Nothing And DeleteSubjectFromGalleryRequest.Identity.IdentityClaim Is Nothing) Then
            deleteSubjectGalleryResponse.ResponseStatus.Return = 9
            deleteSubjectGalleryResponse.ResponseStatus.Message = "Both the input subjectID and the IdentityClaim are empty."
            Return deleteSubjectGalleryResponse
        End If
        If (DeleteSubjectFromGalleryRequest.Identity.SubjectID IsNot Nothing) Then
            idOrClaim = "id"
        ElseIf (DeleteSubjectFromGalleryRequest.Identity.IdentityClaim IsNot Nothing) Then
            idOrClaim = "claim"
        End If

        'to avoid duplicate code, standardize the conditional variable used.
        If (idOrClaim = "claim") Then
            SubjectID = IdentityClaim
        End If

        'Go to gallery and delete the folder+contents
        Dim recordInGalleryPath = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Galleries\" & GalleryID & "\" & SubjectID
        System.IO.Directory.Delete(recordInGalleryPath, True)

        deleteSubjectGalleryResponse.ResponseStatus.Return = 0
        deleteSubjectGalleryResponse.ResponseStatus.Message = "Subject Record sucessfully deleted from gallery."
        Return deleteSubjectGalleryResponse
    End Function

    Public Function Enroll(EnrollRequest As EnrollRequest) As EnrollResponsePackage Implements BIAS_v2.Enroll
        Dim enrollResponse As New EnrollResponsePackage()
        enrollResponse.ResponseStatus = New ResponseStatus

        Dim bias As New BIASService()

        Dim processingOptions As New ProcessingOptionsType
        processingOptions = EnrollRequest.ProcessingOptions

        Dim inputData As New InformationType
        inputData = EnrollRequest.InputData

        'Assuming Identify Subject comes out with false

        'call createSubject
        Dim createSub As New CreateSubjectRequest
        Dim subjectID As String = ""
        subjectID = bias.CreateSubject(createSub).Identity.SubjectID

        'create the identity to be used across all setup/enroll functions
        Dim newIdentity As New BIASIdentity
        newIdentity.SubjectID = subjectID

        'set biographic data
        Dim setBiog As New SetBiographicDataRequest
        setBiog.Identity = newIdentity
        setBiog.Identity.BiographicData = New BiographicDataType
        setBiog.Identity.BiographicData.FirstName = "Paul"
        setBiog.Identity.BiographicData.LastName = "Lee"
        setBiog.Identity.BiographicData.BiographicDataItemList = New BiographicDataItemListType 'filled with biographicDataItemTypes, which consist of Name, Type, and Value Strings.
        Dim dI1 = New BiographicDataItemType
        dI1.Name = "Age"
        dI1.Type = "String"
        dI1.Value = "25"
        Dim dI2 = New BiographicDataItemType
        dI2.Name = "Zipcode"
        dI2.Type = "String"
        dI2.Value = "20874"
        setBiog.Identity.BiographicData.BiographicDataItemList.Add(dI1)
        setBiog.Identity.BiographicData.BiographicDataItemList.Add(dI2)

        bias.SetBiographicData(setBiog)

        'set biometric data
        'Dim setBiom As New SetBiometricDataRequest
        'setBiom.Identity = newIdentity
        'setBiom.Identity.BiometricData = New BIASBiometricDataType

        'add subject to gallery
        'Dim addToGallery As New AddSubjectToGalleryRequest
        'addToGallery.GalleryID = "1"
        'addToGallery.Identity = newIdentity
        'bias.AddSubjectToGallery(addToGallery)

        'Check if the given subject is already known to the system using Identify
        'If not, use any or all of createSubject, SetBiographicData, SetBiometricData, and AddSubjectToGallery to make it known.

        'If it is known, then update bio/biog data in a person centric model, or initiate set Biog/Biom data in an encounter-centric model

        enrollResponse.ResponseStatus.Return = 0
        enrollResponse.ResponseStatus.Message = "Participant Enrolled"
        Return enrollResponse
    End Function

    Public Function GetEnrollResults(GetEnrollResultsRequest As GetEnrollResultsRequest) As GetEnrollResultsResponsePackage Implements BIAS_v2.GetEnrollResults
        Dim enrollResultsResponse As New GetEnrollResultsResponsePackage()
        Return enrollResultsResponse
    End Function

    Public Function GetIdentifyResults(GetIdentifyResultsRequest As GetIdentifyResultsRequest) As GetIdentifyResultsResponsePackage Implements BIAS_v2.GetIdentifyResults
        Dim identityResultsResponse As New GetIdentifyResultsResponsePackage()
        Return identityResultsResponse
    End Function

    Public Function GetIdentifySubjectResults(GetIdentifySubjectResultsRequest As GetIdentifySubjectResultsRequest) As GetIdentifySubjectResultsResponsePackage Implements BIAS_v2.GetIdentifySubjectResults
        Dim identitySubjectResultsResponse As New GetIdentifySubjectResultsResponsePackage()
        Return identitySubjectResultsResponse
    End Function

    Public Function GetVerifyResults(GetVerifyResultsRequest As GetVerifyResultsRequest) As GetVerifyResultsResponsePackage Implements BIAS_v2.GetVerifyResults
        Dim Result As New GetVerifyResultsResponsePackage
        Return Result
    End Function

    Public Function Identify(IdentifyRequest As IdentifyRequest) As IdentifyResponsePackage Implements BIAS_v2.Identify
        'Dim d1 = IdentifyRequest.InputData.ExtensionData.
        Dim identifyResponse As New IdentifyResponsePackage()
        identifyResponse.ResponseStatus = New ResponseStatus
        identifyResponse.ResponseStatus.Return = 99
        identifyResponse.ResponseStatus.Message = "Not implemented yet"
        Return identifyResponse
    End Function

    Public Function IdentifySubject(IdentifySubjectRequest As IdentifySubjectRequest) As IdentifySubjectResponsePackage Implements BIAS_v2.IdentifySubject
        Dim identifySubjectResponse As New IdentifySubjectResponsePackage()
        identifySubjectResponse.ResponseStatus = New ResponseStatus
        identifySubjectResponse.ResponseStatus.Return = 99
        identifySubjectResponse.ResponseStatus.Message = "Not implemented yet"
        Return identifySubjectResponse
    End Function

    Public Function ListBiographicData(ListBiographicDataRequest As ListBiographicDataRequest) As ListBiographicDataResponsePackage Implements BIAS_v2.ListBiographicData
        'List the biographic data fields

        Dim subjectID As String = ListBiographicDataRequest.Identity.SubjectID
        Dim encounterID As String = ListBiographicDataRequest.Identity.EncounterID
        Dim encounterType As String = ListBiographicDataRequest.EncounterType

        Dim listBiogDataResponse As New ListBiographicDataResponsePackage()
        listBiogDataResponse.ResponseStatus = New ResponseStatus()
        'if encounter type system...
        'else...

        If (ListBiographicDataRequest.Identity.SubjectID Is Nothing) Then
            listBiogDataResponse.ResponseStatus.Return = 9
            listBiogDataResponse.ResponseStatus.Message = "The input subject ID is empty or in an invalid format."
            Return listBiogDataResponse
        End If

        'open subject record file
        Dim subjectFile = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records" & "\" & subjectID & "\" & subjectID & ".txt"

        'Read in text file, find the line # that has biographic data
        If (File.Exists(subjectFile)) Then

            Dim readText As List(Of String) = System.IO.File.ReadAllLines(subjectFile).ToList
            Dim biographicLineNum = readText.IndexOf("Biographic Data: ")

            'Loop through readText starting at biographic Line Num
            'Until you see a blank line, add substring'd lines to new list

            
        End If




        Return listBiogDataResponse
    End Function

    Public Function ListBiometricData(ListBiometricDataRequest As ListBiometricDataRequest) As ListBiometricDataResponsePackage Implements BIAS_v2.ListBiometricData
        Dim listBiomDataResponse As New ListBiometricDataResponsePackage()
        Return listBiomDataResponse
    End Function

    Public Function PerformFusion(PerformFusionRequest As PerformFusionRequest) As PerformFusionResponsePackage Implements BIAS_v2.PerformFusion
        Dim performFusionResponse As New PerformFusionResponsePackage()
        Return performFusionResponse
    End Function

    Public Function QueryCapabilities(QueryCapabilitiesRequest As QueryCapabilitiesRequest) As QueryCapabilitiesResponsePackage Implements BIAS_v2.QueryCapabilities
        Dim queryCapabilitiesResponse As New QueryCapabilitiesResponsePackage()

        Dim Response As New QueryCapabilitiesResponsePackage()
        Return queryCapabilitiesResponse
    End Function

    Public Function RetrieveBiographicData(RetrieveBiographicDataRequest As RetrieveBiographicDataRequest) As RetrieveBiographicDataResponsePackage Implements BIAS_v2.RetrieveBiographicData
        Dim retrieveBiogDataResponse As New RetrieveBiographicDataResponsePackage()
        Return retrieveBiogDataResponse
    End Function

    Public Function RetrieveBiometricData(RetrieveBiometricDataRequest As RetrieveBiometricDataRequest) As RetrieveBiometricDataResponsePackage Implements BIAS_v2.RetrieveBiometricData
        Dim retrieveBiomDataResponse As New RetrieveBiometricDataResponsePackage()
        Return retrieveBiomDataResponse
    End Function

    Public Function RetrieveData(RetrieveDataRequest As RetrieveDataRequest) As RetrieveDataResponsePackage Implements BIAS_v2.RetrieveData
        Dim retrieveDataResponse As New RetrieveDataResponsePackage()
        Return retrieveDataResponse
    End Function

    Public Function SetBiographicData(SetBiographicDataRequest As SetBiographicDataRequest) As SetBiographicDataResponsePackage Implements BIAS_v2.SetBiographicData

        'ADD OTHER RETURN CODES HERE LATER

        'Used to set the first set of biog data
        Dim dataList = New BiographicDataItemListType
        dataList = SetBiographicDataRequest.Identity.BiographicData.BiographicDataItemList

        Dim subjectID As String = SetBiographicDataRequest.Identity.SubjectID
        Dim firstName As String = SetBiographicDataRequest.Identity.BiographicData.FirstName
        Dim lastName As String = SetBiographicDataRequest.Identity.BiographicData.LastName

        'create new dictionary
        Dim biogDataDictionary As New Dictionary(Of String, String)
        biogDataDictionary.Add("First Name:", firstName)
        biogDataDictionary.Add("Last Name:", lastName)
        For Each dataItem In dataList
            biogDataDictionary.Add(dataItem.Name & ":", dataItem.Value)
        Next

        'read in file contents
        Dim subjectFile = Directory.GetParent(Directory.GetParent(Directory.GetCurrentDirectory()).ToString).ToString & "\MasterDB\Subject Records\" & subjectID & "\" & subjectID & ".txt"
        Dim readText As String = System.IO.File.ReadAllLines(subjectFile)
        Dim biographicLineNum = readText.IndexOf("BiographicData:")
        'append lines

        For Each Item As KeyValuePair(Of String, String) In biogDataDictionary
            Dim dictionaryField As String = (Item.Key & ":" & Item.Value)
            readText.Insert(biographicLineNum, dictionaryField)
        Next

        System.IO.File.WriteAllText(subjectFile, "")












        Dim setBiogDataResponse As New SetBiographicDataResponsePackage()
        Dim responseStatus As New ResponseStatus
        responseStatus.Return = 0
        setBiogDataResponse.ResponseStatus = responseStatus
        Return (setBiogDataResponse)
    End Function

    Public Function SetBiometricData(SetBiometricDataRequest As SetBiometricDataRequest) As SetBiometricDataResponsePackage Implements BIAS_v2.SetBiometricData
        'Used to set the first set of biom data
        Dim setBiomDataResponse As New SetBiometricDataResponsePackage()
        Return setBiomDataResponse
    End Function

    Public Function TransformBiometricData(TransformBiometricDataRequest As TransformBiometricDataRequest) As TransformBiometricDataResponsePackage Implements BIAS_v2.TransformBiometricData
        Dim transformBiomDataResponse As New TransformBiometricDataResponsePackage()
        Return transformBiomDataResponse
    End Function

    Public Function UpdateBiographicData(UpdateBiographicDataRequest As UpdateBiographicDataRequest) As UpdateBiographicDataResponsePackage Implements BIAS_v2.UpdateBiographicData
        'Used in person centric models
        Dim updateBiogDataResponse As New UpdateBiographicDataResponsePackage()
        Return updateBiogDataResponse
    End Function

    Public Function UpdateBiometricData(UpdateBiometricDataRequest As UpdateBiometricDataRequest) As UpdateBiometricDataResponsePackage Implements BIAS_v2.UpdateBiometricData
        'Used in person centric models
        Dim updateBiomDataResponse As New UpdateBiometricDataResponsePackage()
        Return updateBiomDataResponse
    End Function

    Public Function Verify(VerifyRequest As VerifyRequest) As VerifyResponsePackage Implements BIAS_v2.Verify
        Dim verifyResponse As New VerifyResponsePackage()
        Return verifyResponse
    End Function

    Public Function VerifySubject(VerifySubjectRequest As VerifySubjectRequest) As VerifySubjectResponsePackage Implements BIAS_v2.VerifySubject
        Dim verifySubjectResponse As New VerifySubjectResponsePackage()
        Return verifySubjectResponse
    End Function


    'Public Function GetPolicy() As IO.Stream Implements IPolicyRetriever.GetPolicy
    '    '<cross-domain-policy xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd">
    '    '<allow-access-from domain="twitter.com"/>
    '    '<allow-access-from domain="api.twitter.com"/>
    '    '<allow-access-from domain="search.twitter.com"/>
    '    '<allow-access-from domain="static.twitter.com"/>
    '    '<site-control permitted-cross-domain-policies="master-only"/>
    '    '<allow-http-request-headers-from domain="*.twitter.com" headers="*" secure="true"/>
    '    '</cross-domain-policy>

    '    Dim policy = "<cross-domain-policy>" &
    '                 "  <allow-access-from domain='*' />" &
    '                 "  <site-control permitted-cross-domain-policies='all' />" &
    '                 "  <allow-http-request-headers-from domain='*' headers='*' />" &
    '                 "</cross-domain-policy>"

    '    WebOperationContext.Current.OutgoingResponse.ContentType = "application/xml"
    '    Return New MemoryStream(Encoding.UTF8.GetBytes(policy))
    'End Function
End Class
